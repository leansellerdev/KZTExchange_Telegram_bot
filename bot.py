from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Text, Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from misc.config_data import load_config
from models.data_base import SQLighter
from keyboards.currencies_buttons import currency_keyboard
from emoji import emojize
from api.exchange_rate import get_sell_rates, get_buy_rates, get_daily_send_rates


def start_bot():

    config = load_config(".env")
    bot_token = config.tg_bot.token
    super_admin = config.tg_bot.admin_ids[0]

    bot = Bot(token=bot_token)
    dp = Dispatcher()
    scheduler = AsyncIOScheduler(timezone='Asia/Almaty')

    db = SQLighter('db.db')

    """Admin notification function"""

    async def admin_message_notification(user_id: int, name: str):

        await bot.send_message(super_admin, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{name}</b>,\n'
                                            f'ID: <b>{user_id}</b> —Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å',
                               parse_mode='html')

    """Welcome message"""

    @dp.message(Command(commands=['start']))
    async def send_welcome(message: Message):

        user_name = message.from_user.first_name

        await bot.send_message(message.chat.id,
                               text=f"–ü—Ä–∏–≤–µ—Ç, <b>{user_name}!</b>"
                                    f" –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞.",
                               reply_markup=currency_keyboard,
                               parse_mode="html")

        await admin_message_notification(message.from_user.id, message.from_user.first_name)

    """Send info"""

    @dp.message(Command(commands=['info']))
    async def info(message: Message):

        await bot.send_message(message.from_user.id,
                               text=f'{emojize(":brain:")}–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ '
                                    f'–æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ —Ç–µ–Ω–≥–µ\n\n {emojize(":calendar:")}–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é '
                                    f'—Ä–∞—Å—Å—ã–ª–∫—É\n\n {emojize(":watch:")}–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è '
                                    f'–≤ <b>9:00</b>, <b>14:00</b> –∏ <b>18:00</b>'
                                    f' —á–∞—Å–æ–≤ –ø–æ –ê–ª–º–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
                               parse_mode='html')

    """Subscribe function"""

    @dp.message(Command(commands=['subscribe']))
    async def subscribe(message: Message):
        if not db.subscriber_exists(message.from_user.id):
            db.add_subscriber(message.from_user.id, True)
            await bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!")
        elif db.subscriber_exists(message.from_user.id) and db.check_subscription(message.from_user.id):
            await bot.send_message(message.from_user.id, text="–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!")
        else:
            db.update_subscription(message.from_user.id, True)
            await bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!")

    """Unsubscribe function"""

    @dp.message(Command(commands=['unsubscribe']))
    async def unsubscribe(message: Message):
        if not db.subscriber_exists(message.from_user.id):
            db.add_subscriber(message.from_user.id, False)
            await bot.send_message(message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É!")
        elif db.subscriber_exists(message.from_user.id) and not db.check_subscription(message.from_user.id):
            await bot.send_message(message.from_user.id, text="–í—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏!")
        else:
            db.update_subscription(message.from_user.id, False)
            await bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏!")

    """Function for sending all of currencies"""

    @dp.message(Command(commands=['show_all']))
    async def show_all(message: Message):

        daily_rates = get_daily_send_rates()
        txt = ''

        for key, values in daily_rates.items():
            txt += f"<b>{key}</b> : {float(values[0])}, {float(values[1])}\n"

        await bot.send_message(message.from_user.id,
                               text=f"–ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞:\n"
                                    f"{txt}",
                               parse_mode='html')

    """Sending exchange rates"""

    @dp.message(Text(text=["USD", "EUR", "RUB", "KGS", "GBP", "CNY", "GOLD"],
                     ignore_case=True))
    async def send_exchange_rates(message: Message):

        current_time = datetime.now().strftime("%d-%m-%Y %H:%M")

        sell_rates = get_sell_rates()
        buy_rates = get_buy_rates()

        sell_txt = []
        buy_txt = []

        for keys, values in sell_rates.items():
            if message.text.upper() == keys:
                sell_txt.append(f'<b>KZT/{keys}</b>: <b>{values}‚Ç∏</b>')

        for key, value in buy_rates.items():
            if message.text.upper() == key:
                buy_txt.append(f'<b>KZT/{key}</b>: <b>{value}‚Ç∏</b>')

        try:
            await bot.send_message(message.chat.id,
                                   text=f'{current_time}\n'
                                        f'üí∏{buy_txt[0]}üí∏\n'
                                        f'üí∏{sell_txt[0]}üí∏',
                                   parse_mode='html')
        except Exception as ex:
            print("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞–ª—é—Ç—É", ex)

    """Function for sending exchange rates every day with subscription"""

    async def daily_send():

        try:
            chat_ids = db.get_subscription()

            daily_rates = get_daily_send_rates()

            for chat_id in chat_ids:
                txt = ''
                if chat_id[2]:
                    for key, values in daily_rates.items():
                        txt += f"<b>{key}</b> : {float(values[0])}, {float(values[1])}\n"

                    await bot.send_message(chat_id[1],
                                           text=f"üóì–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –†–ê–°–°–´–õ–ö–êüóì\n"
                                                f"–ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞:\n"
                                                f"{txt}",
                                           parse_mode='html')
        except Exception as ex:
            print(ex)

    scheduler.add_job(daily_send, trigger='cron', hour='9', minute='00')
    scheduler.add_job(daily_send, trigger='cron', hour='14', minute='00')
    scheduler.add_job(daily_send, trigger='cron', hour='18', minute='00')

    scheduler.start()

    dp.run_polling(bot, skip_updates=True)
