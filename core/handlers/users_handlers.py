"""
Handle all action messages
"""


from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Text, Command
from aiogram.fsm.context import FSMContext
from core.states.states import FSMExchangeRates
from core.keyboards.action_buttons import start_kb_builder, contact_kb_builder
from core.bot_lexicon.lexicon_ru import info_text
from core.services.addresses import get_address_info
# from services.services import get_rates_to_date_text

router: Router = Router()


# Welcome message
@router.message(Command(commands=['start']))
async def start(message: Message, state: FSMContext):
    user_name = message.from_user.first_name

    await state.set_state(FSMExchangeRates.choose_action)
    await message.answer(text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user_name}!</b>"
                              f" –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=start_kb_builder.as_markup(
                             resize_keyboard=True
                         ),
                         parse_mode="html")


# Send info
@router.message(Command(commands=['info']), FSMExchangeRates.choose_action)
async def info(message: Message):
    await message.answer(text=info_text,
                         parse_mode='html')


@router.message(Text(text=["üîô –ù–∞–∑–∞–¥"]))
async def get_back(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.set_state(FSMExchangeRates.choose_action)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=start_kb_builder.as_markup(
                             resize_keyboard=True
                         ),
                         parse_mode='html')


@router.message(Text(text=["‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã"]))
async def send_districts(message: Message, state: FSMContext):

    await state.set_state(FSMExchangeRates.choose_district)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
                         reply_markup=contact_kb_builder.as_markup(
                             resize_keyboard=True
                         ),
                         parse_mode='html')


@router.message(Text(text=["–ê—É—ç–∑–æ–≤—Å–∫–∏–π", "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π", "–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π", "–ú–µ–¥–µ—É—Å–∫–∏–π",
                           "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π", "–¢—É—Ä–∫—Å–∏–±—Å–∫–∏–π", "–¢–∞–ª–≥–∞—Ä—Å–∫–∏–π", "–ê–ª–∞—Ç–∞—É—Å–∫–∏–π"]))
async def send_offices_contacts(message: Message, state: FSMContext):

    await state.set_state(FSMExchangeRates.getting_contacts)
    await message.answer(text=get_address_info(message.text))


# Function for sending exchange rates to past days
# @router.message(Text(text=["–ü–æ–∑–∞–≤—á–µ—Ä–∞", "–í—á–µ—Ä–∞", "–°–µ–≥–æ–¥–Ω—è"],
#                      ignore_case=True))
# async def send_rates_to_date(message: Message):
#     text = get_rates_to_date_text(message.text)
#
#     await message.answer(text=text, parse_mode="html")
